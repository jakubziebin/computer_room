from __future__ import annotations

from typing import Final
import asyncio

from textual import on
from textual.containers import Horizontal
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, Button
from textual.reactive import var

import RPi.GPIO as GPIO
import Adafruit_DHT as dht

def read_dht_values(*pins: int) -> dict[str, int] | None:
    """
    Returns a dictionary in the following format: {humidity_1: 49, temperature_1: 23}
    The number of humidities and temperatures depends on the number of pins provided.

    Parameters
    ----------
    *pins : int
    Include as many pin numbers as you have DHT sensors.
    """
    measurements = {}

    for pin in pins:
        humidity, temperature = dht.read_retry(dht.DHT22, pin)

        if humidity is not None and temperature is not None:
            measurements[f"humidity_{pin}"] = humidity
            measurements[f"temperature_{pin}"] = temperature
        else:
            return "Failed to get reading. Try again!"

    return measurements


async def open_window(openning_time: int) -> None:
    """
    Parameters
    -------------
    pin: the GPIO pin number that is connected to the motor driver.d
    """
    OPEN_WINDOW_PIN: Final[int] = 13
    
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    GPIO.setup(OPEN_WINDOW_PIN, GPIO.OUT)
    GPIO.output(OPEN_WINDOW_PIN, GPIO.LOW)
    await asyncio.sleep(openning_time)
    GPIO.output(OPEN_WINDOW_PIN, GPIO.HIGH)



async def close_window(closing_time: int) -> None:
    """
    Parameters
    -------------
    pin: the GPIO pin number that is responsible for closing the window.
    """
    CLOSE_WINDOW_PIN: Final[int] = 16
    
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

    GPIO.setup(CLOSE_WINDOW_PIN, GPIO.OUT)
    GPIO.output(CLOSE_WINDOW_PIN, GPIO.LOW)
    await asyncio.sleep(closing_time)
    GPIO.output(CLOSE_WINDOW_PIN, GPIO.HIGH)



class ComputerRoomApp(App):
    DEFAULT_CSS = """
    Button {
        height: 12;
        width: 20;
        margin-left: 2;
        margin-right: 2;
    }

    Horizontal {
        align: center middle;
        width: 1fr;
    }
    """

    window_position: int = var(0)
    auto_mode: bool = var(True)
    
    def __init__():
        super().__init__()
        self.__interval = self.set_interval(60, self.auto_mode_script)

    def compose(self) -> ComposeResult:
        yield Header()
        with Horizontal(id="mode-choose-container"):
            yield Button("Close", id="mode-0")
            yield Button("Open", id="mode-1")
        yield Button("Change mode", id="change-mode")
        yield Footer()

    @on(Button.Pressed, "#mode-0")
    async def close_window(self, event: Button.Pressed) -> None:
        if self.window_position == 0:
            return
        
        if self.auto_mode:
            return
            
        self.window_position = 0
        await close_window(9)

    @on(Button.Pressed, "#mode-1")
    async def open_window(self, event: Button.Pressed) -> None:
        if self.window_position == 1:
            return
            
        if self.auto_mode:
            return
            
        self.window_position = 1
        await open_window(9)
    
    @on(Button.Pressed, "#change-mode")
    async def change_mode(self) -> None:
        if self.window_position == 1:
            await close_window(9)
            self.window_position = 0
        self.auto_mode = not self.auto_mode
    
    
    def auto_mode_script(self) -> None:
        dhtki = read_dht_values(4)
        self.notify(dhtki) 
        
try:
    app = ComputerRoomApp()
    app.run()
except KeyboardInterrupt:
    GPIO.cleanup()
